generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model User {
    id         String   @id @default(cuid())
    userType   UserType
    lastName   String?
    firstName  String?
    middleName String?
    age        String?

    phoneNumber  String?
    email        String? @unique
    linkedinLink String?
    githubLink   String?
    telegramLink String?

    login     String     @unique
    password  String
    candidate Candidate?
    employer  Employer?
}

model Candidate {
    candidateId      String           @unique
    candidate        User             @relation(fields: [candidateId], references: [id])
    moderationStatus ModerationStatus @default(PENDING)

    questionnaires Questionnaire[]
    responses      Response[]
    resume         Resume[]
}

model Employer {
    employerId String @unique
    employer   User   @relation(fields: [employerId], references: [id])

    companyName    String?
    companyAddress String?
    questionnaires Questionnaire[]
    responses      Response[]
    vacancy        Vacancy[]
}

model Questionnaire {
    id                String            @id @default(cuid())
    questionnaireType QuestionnaireType
    candidateId       String?           @unique
    employerId        String?           @unique
    candidate         Candidate?        @relation(fields: [candidateId], references: [candidateId])
    employer          Employer?         @relation(fields: [employerId], references: [employerId])
    resume            Resume?
    vacancy           Vacancy?
}

model Resume {
    questionnaireId  String           @unique
    questionnaire    Questionnaire    @relation(fields: [questionnaireId], references: [id])
    candidateId      String           @unique
    candidate        Candidate        @relation(fields: [candidateId], references: [candidateId])
    moderationStatus ModerationStatus @default(PENDING)

    workExperience   String
    skills           String
    education        String?
    foreignLanguages String?
    interests        String?
    achievements     String?
    specialty        String?
    desiredSalary    Int?
    employment       String?
    updatedAt        DateTime  @updatedAt()
    response         Response?
}

model Vacancy {
    questionnaireId   String        @unique
    questionnaire     Questionnaire @relation(fields: [questionnaireId], references: [id])
    employerId        String        @unique
    employer          Employer      @relation(fields: [employerId], references: [employerId])
    specialty         String
    salary            Int?
    duties            String?
    requirements      String?       @db.MediumText
    conditions        String?       @db.MediumText
    workSchedule      String?       @db.MediumText
    employment        String?
    dateOfPublication DateTime      @default(now())
    response          Response?
}

model Response {
    id             String          @id @default(cuid())
    resumeId       String          @unique
    vacancyId      String          @unique
    candidateId    String          @unique
    employerId     String          @unique
    coverLetter    String          @db.MediumText
    responseDate   DateTime        @default(now())
    resume         Resume          @relation(fields: [resumeId], references: [questionnaireId])
    vacancy        Vacancy         @relation(fields: [vacancyId], references: [questionnaireId])
    candidate      Candidate       @relation(fields: [candidateId], references: [candidateId])
    employer       Employer        @relation(fields: [employerId], references: [employerId])
    feedbackResult FeedbackResult?
}

model FeedbackResult {
    id           String   @id @default(cuid())
    responseId   String   @unique
    response     String   @db.MediumText
    responseDate DateTime @default(now())
    feedback     Response @relation(fields: [responseId], references: [id])
}

enum UserType {
    CANDIDATE
    EMPLOYER
    ADMIN
}

enum ModerationStatus {
    PENDING
    ACCEPTED
    REJECTED
}

enum QuestionnaireType {
    RESUME
    VACANCY
}
