generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
    id         String   @id @default(cuid())
    userType   UserType
    lastName   String?
    firstName  String?
    middleName String?
    age        String?

    phoneNumber  String?
    email        String? @unique
    linkedinLink String?
    githubLink   String?
    telegramLink String?

    login     String     @unique
    password  String
    candidate Candidate?
    employer  Employer?
}

model Candidate {
    candidateId String @unique
    candidate   User   @relation(fields: [candidateId], references: [id])

    questionnaires Questionnaire?
    responses      Response[]
    resume         Resume?
}

model Employer {
    employerId String @unique
    employer   User   @relation(fields: [employerId], references: [id])

    companyName    String?
    companyAddress String?
    questionnaires Questionnaire[]
    responses      Response[]
    vacancy        Vacancy[]
}

model Questionnaire {
    questionnaireId   String            @id @default(cuid())
    questionnaireType QuestionnaireType
    candidateId       String?           @unique
    employerId        String?
    candidate         Candidate?        @relation(fields: [candidateId], references: [candidateId])
    employer          Employer?         @relation(fields: [employerId], references: [employerId])
    resume            Resume?
    vacancy           Vacancy?

    @@index([employerId])
}

model Resume {
    questionnaireId  String           @unique
    questionnaire    Questionnaire    @relation(fields: [questionnaireId], references: [questionnaireId])
    candidateId      String           @unique
    candidate        Candidate        @relation(fields: [candidateId], references: [candidateId])
    moderationStatus ModerationStatus @default(PENDING)

    workExperience   String?
    skills           String?
    education        String?
    foreignLanguages String?
    interests        String?
    achievements     String?
    specialty        String?
    desiredSalary    String?
    employment       String?
    updatedAt        DateTime   @updatedAt()
    response         Response[]
}

model Vacancy {
    questionnaireId  String           @unique
    questionnaire    Questionnaire    @relation(fields: [questionnaireId], references: [questionnaireId])
    employerId       String
    employer         Employer         @relation(fields: [employerId], references: [employerId])
    moderationStatus ModerationStatus @default(PENDING)

    specialty         String
    salary            String?
    duties            String?
    requirements      String?    @db.MediumText
    conditions        String?    @db.MediumText
    workSchedule      String?    @db.MediumText
    employment        String?
    dateOfPublication DateTime   @default(now())
    response          Response[]

    @@index([employerId])
}

model Response {
    responseId String @id @default(cuid())

    candidateId String
    resumeId    String
    employerId  String
    vacancyId   String

    candidate Candidate @relation(fields: [candidateId], references: [candidateId])
    resume    Resume?   @relation(fields: [resumeId], references: [questionnaireId])
    employer  Employer  @relation(fields: [employerId], references: [employerId])
    vacancy   Vacancy?  @relation(fields: [vacancyId], references: [questionnaireId])

    coverLetter    String          @db.MediumText
    responseBy     ResponseBy
    responseDate   DateTime        @default(now())
    feedbackResult FeedbackResult?

    @@index([candidateId])
    @@index([resumeId])
    @@index([employerId])
    @@index([vacancyId])
}

model FeedbackResult {
    feedbackResultId String   @id @default(cuid())
    responseId       String   @unique
    feedback         Response @relation(fields: [responseId], references: [responseId])

    response       String         @db.MediumText
    responseResult ResponseResult
    responseDate   DateTime       @default(now())
}

enum UserType {
    CANDIDATE
    EMPLOYER
    ADMIN
}

enum ResponseBy {
    CANDIDATE
    EMPLOYER
}

enum ModerationStatus {
    PENDING
    ACCEPTED
    REJECTED
}

enum QuestionnaireType {
    RESUME
    VACANCY
}

enum ResponseResult {
    ACCEPTED
    REJECTED
}
